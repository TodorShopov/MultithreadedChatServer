import java.util.*;
import java.net.*;
import java.io.*;


public class Server implements Runnable {
	private ServerSocket server;
	private Thread thread;
	private ServerThread[] clients;
	
	private List<ChatRoom> chatRooms;
	
	static int clientsCount;
	static final int capacity = 50;
	
	UserInfo userInfo;

	public Server(int port) {
		clients = new ServerThread[capacity];
		
		userInfo = new UserInfo(port);
		
		chatRooms = new ArrayList<ChatRoom>();
		chatRooms.add(new ChatRoom("Global", "Unknown", port));
		chatRooms.get(0).removeUsersMethod("Unknown");
		
		clientsCount = 0;
		
		try {
			System.out.println("Binding to port " + port + ", please wait  ...");
			
			server = new ServerSocket(port);
			
			System.out.println("Server started: " + server);
			System.out.println("Waiting for a client ...");
			
			start();
		} catch (IOException ioe) {
			System.out.println("Error starting server: " + ioe.getMessage());
			stop();
		}
	}

	public void run() {
		while (true) {
			try {
				UserInfo.readDataMethod(); // updates server's registration list
				addClient(server.accept());
			} catch (IOException ioe) {
				System.out.println("Error accepting connection: " + ioe.getMessage());
			}
		}
	}

	public void addClient(Socket socket) {
		int freePosition = getFreePosition();
		
		if (freePosition != -1) {
			
			System.out.println("Client accepted: " + socket);
			System.out.println("Total clients: " + clientsCount);
			
			clients[freePosition] = new ServerThread(this, socket);
			clientsCount++;
		
		} else {
			System.out.println("Server is full. Failed to accept new client.");
		}
	}

	public synchronized void handleMessage(String chatRoom, int ID, String input) {
		if (input.equals("/exit")) {
			
			for (int i = 0; i < capacity; i++)
				if (clients[i] != null && clients[i].isAlive() && i != findClient(ID)
						&& clients[i].chatRoom.equals(chatRoom))
					clients[i].send(chatRoom + " - " + clients[findClient(ID)].username + " has disconnected.");

			if (findClient(ID) != -1) {
				clients[findClient(ID)].send(input);
				remove(ID);
			}

		} else {

			for (int i = 0; i < capacity; i++)
				if (clients[i] != null && clients[i].isAlive() && clients[i].chatRoom.equals(chatRoom))
					clients[i].send(chatRoom + " - " + input);

			if (!input.endsWith(" has joined the room.") && !input.endsWith(" has left the room."))
				chatRooms.get(findRoom(chatRoom)).writeToCh(input);
				
		}
	}

	public synchronized void handlePrivateMessage(int ID, String input, String username) {
		int receiverID = getID(username);

		if (receiverID == -1)
			clients[findClient(ID)].send("There is no such user online.");
		else {
			clients[findClient(receiverID)].send(input);
			clients[findClient(ID)].send(input);
		}
	}

	public int getID(String username) {
		for (int i = 0; i < clients.length; i++)
			if (clients[i] != null && clients[i].isAlive() && clients[i].username.equals(username))
				return clients[i].ID;

		return -1;
	}

	public synchronized boolean isLoggedIn(String username) {
		for (int i = 0; i < clients.length; i++)
			if (clients[i] != null && clients[i].isAlive() && clients[i].username.equals(username))
				return true;

		return false;
	}

	void remove(int ID) {
		if (findClient(ID) != -1)
			clients[findClient(ID)] = null;
	}

	private int findClient(int ID) {
		for (int i = 0; i < capacity; i++)
			if (clients[i] != null && clients[i].isAlive() && clients[i].ID == ID)
				return i;

		return -1;
	}

	private int getFreePosition() {
		for (int i = 0; i < capacity; i++)
			if (clients[i] == null)
				return i;

		return -1;
	}

	private int findRoom(String chatroom) {
		for (int i = 0; i < chatRooms.size(); i++)
			if (chatRooms.get(i).name.equals(chatroom))
				return i;

		return -1;
	}

	public boolean create(String username, String chatroom) {
		if (findRoom(chatroom) != -1)
			return false;

		chatRooms.add(new ChatRoom(chatroom, username, chatRooms.get(0).port));
		chatRooms.get(0).removeUsersMethod(username);

		return true;
	}

	public boolean join(String username, String chatroom) {
		int x = findRoom(chatroom);
		if (x == -1)
			return false;

		chatRooms.get(x).addUsersMethod(username);
		chatRooms.get(0).removeUsersMethod(username);
		clients[findClient(getID(username))].send(chatRooms.get(x).readFromCh());

		return true;
	}

	public void leave(String username, String chatroom) {
		chatRooms.get(findRoom(chatroom)).removeUsersMethod(username);
		chatRooms.get(0).addUsersMethod(username);
	}

	public boolean delete(String username, String chatroom) {
		int x = findRoom(chatroom);
		if (!chatRooms.get(x).creator.equals(username))
			return false;

		for (int i = 0; i < chatRooms.get(x).currentUsers.size(); i++) {
			
			clients[findClient(getID(chatRooms.get(x).currentUsers.get(i)))].chatRoom = "Global";
			chatRooms.get(0).addUsersMethod(chatRooms.get(x).currentUsers.get(i));
			
			if (!chatRooms.get(x).currentUsers.get(i).equals(username))
				clients[findClient(getID(chatRooms.get(x).currentUsers.get(i)))]
						.send("Chatroom '" + chatroom + "' has been deleted.\nYou have been moved to Global channel.");
		}

		chatRooms.remove(x);
		return true;
	}

	public void removeUser(String username, String chatroom) {
		chatRooms.get(findRoom(chatroom)).removeUsersMethod(username);
	}

	public void addUser(String username, String chatroom) {
		chatRooms.get(findRoom(chatroom)).addUsersMethod(username);
	}

	public String listRooms() {
		String chatRoomList = "";
		for (int i = 0; i < chatRooms.size(); i++)
			chatRoomList += chatRooms.get(i).toString();

		return chatRoomList;
	}

	public String listUsers(String chatroom) {
		for (int i = 0; i < chatRooms.size(); i++)
			if (chatRooms.get(i).name.equals(chatroom))
				return "Online users in " + chatroom + ":\n" + chatRooms.get(i).getOnlineUsers();

		return "";
	}

	public void start() {
		if (thread == null) {
			thread = new Thread(this);
			thread.start();
		}
	}

	@SuppressWarnings("deprecation")
	public void stop() {
		if (thread != null) {
			thread.stop();
			thread = null;
		}
	}

	public static void main(String[] args) {
		System.out.println("Which port would you like to use to host a server?");

		Scanner in = new Scanner(System.in);
		int port = in.nextInt();
		in.close();

		System.out.println("Creating chat server on localhost, port " + port);

		@SuppressWarnings("unused")
		Server chatServer = new Server(port);
	}
}
